using Xunit.Abstractions;
using Xunit.Sdk;

namespace Agoda.Tests.Metrics.xUnit
{
    internal class AgodaMessageBus : IMessageBus
    {
        IMessageBus _messageBus;
        IMessageSink _messageSink;
        TestSuiteReporter? _reporter;

        /// <summary>
        /// Indicate we received a message for the test case
        /// </summary>
        public bool MessageReceived { get; private set; } = false;

        /// <summary>
        /// The failure message for the failed test
        /// </summary>
        public string FailureMessage { get; private set; } = string.Empty;

        /// <summary>
        /// Output generated by test
        /// </summary>
        public string Output { get; private set; } = string.Empty;

        /// <summary>
        /// Constructor that wraps an existing MessageBus
        /// </summary>
        public AgodaMessageBus(IMessageBus messageBus, TestSuiteReporter? reporter, IMessageSink messageSink)
        {
            _messageBus = messageBus;
            _messageSink = messageSink;
            _reporter = reporter;
        }

        public void Dispose()
        {
            _messageBus.Dispose();
        }

        private void Diagnostic(string message)
        {
            _messageSink.OnMessage(new DiagnosticMessage(message ?? "** NO MESSAGE **"));
        }

        public bool QueueMessage(IMessageSinkMessage message)
        {
            switch (message)
            {
                case TestPassed testPassed:
                    _reporter?.ReportSuccess(
                        testPassed.Test.DisplayName.Substring(testPassed.Test.TestCase.TestMethod.TestClass.Class.Name.Length + 1),
                        testPassed.Test.TestCase.TestMethod.TestClass.Class.Name,
                        testPassed.ExecutionTime
                        );
                    break;
                case TestFailed testFailed:
                    Diagnostic($"{message} - {testFailed.Test.DisplayName}");
                    break;
                case TestSkipped testSkipped:
                    Diagnostic($"{message} - {testSkipped.Test.DisplayName}");
                    break;
//                default:
//                    _messageSink.OnMessage(new DiagnosticMessage($"{message}"));
//                    break;
            }
            return _messageBus.QueueMessage(message);
        }
    }
}
